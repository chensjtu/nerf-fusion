run_name: "debug"

num_epochs: 600
batch_size: 64
batch_split: 1
samples_per_lif: 4096
min_context_points: 16

## depth
depth_cut_min: 0.5
depth_cut_max: 5.0

## GPU
gpu: "auto"

lr_schedule:
  # For decoder parameters
  - { "Type" : "Step", "Initial" : 0.001, "Interval" : 80, "Factor" : 0.4 }
  # For encoder parameters
  - { "Type" : "Step", "Initial" : 0.001, "Interval" : 80, "Factor" : 0.4 }

# Dataset.
# train_set:
#   - { "data_path": "../di-datasets/shapenet_plivoxs", "augment_rotation": 'Y', "num_surface_sample": 128, "augment_noise": [0.025, 40.0] }
# Sequence parameters
sequence_type: "icl_nuim.ScannetSequence"
sequence_kwargs:
  path: "/data/yangchen/ICL-NUIM/Di-Fusion_demo"
  start_frame: 0
  end_frame: -1                                       # Run all frames
  first_tq: [-1.4, 1.5, 1.5, 0.0, -1.0, 0.0, 0.0]     # Starting pose

train_set:
  - {"data_path": "/data/yangchen/ICL-NUIM/Di-Fusion_demo"}

# Code specification
code_bound: null
code_length: 128

# Decoder specification
network_name: "di_decoder"
network_specs:
  dims: [ 128, 128, 128, 128 ]
  dropout: [0, 1, 2, 3, 4, 5]
  dropout_prob: 0.2
  norm_layers: [0, 1, 2, 3, 4, 5]
  latent_in: [3]
  weight_norm: true

# Encoder specification
encoder_name: "di_encoder"
encoder_specs:
  per_point_feat: [ 6, 32, 64, 256 ]
  bn: {"class": "BatchNorm"}

# Snapshots saving parameters
snapshot_frequency: 100
additional_snapshots: [50]

# SDF samples
training_loss:
    types: [ "neg_log_likelihood", "reg_loss" ]
    enforce_minmax: true
    clamping_distance: 0.2
    code_reg_lambda: 1.0e-2

# Mapping parameters
mapping:
  # Bound of the scene to be reconstructed
  bound_min: [-3.5, -0.5, -2.5]
  bound_max: [4.5, 3.5, 5.5]
  voxel_size: 0.1
  
  # Prune observations if detected as noise.
  prune_min_vox_obs: 16
  ignore_count_th: 16.0
  encoder_count_th: 600.0

# Tracking parameters
tracking:
  # An array defining how the camera pose is optimized.
  # Each element is a dictionary:
  #   For example {"n": 2, "type": [['sdf'], ['rgb', 1]]} means to optimize the summation of sdf term and rgb term
  # at the 1st level pyramid for 2 iterations.
  iter_config:
    - {"n": 10, "type": [['rgb', 2]]}
    - {"n": 10, "type": [['sdf'], ['rgb', 1]]}
    - {"n": 50, "type": [['sdf'], ['rgb', 0]]}
  sdf:
    robust_kernel: "huber"
    robust_k: 5.0
    subsample: 1.0
  rgb:
    weight: 500.0
    robust_kernel: null
    robust_k: 0.01
    min_grad_scale: 0.0
    max_depth_delta: 0.2